# *** Функции - кирпичики любой программы ***

# *** Функции - "фабрики", которые на вход принимают как-либо данные и на выход возвращают другие данные

# 1 вариант: Функция, которая на вход ничего не принимает и на выход ничего не возвращает

def func_1():
    print("Hello World!")

def func_2():
    name = "Anastasia"
    print(f"Hello {name}!")

# 2 вариант. Функция, которая принимает данные (имеет вход(-ы)), но ничего не возвращает

def func_3(argument_1, arg_2):
    result = argument_1 + arg_2
    print(result)
    

# Вызов функции с передачей параметров аргументам
# func_3(100, 55)

# 2.1 Вариант. Функция, принимающая данные, но ничего не возвращает, причем аргументы имеют значения по умолчанию

def func_4(arg_1, arg_2, arg_3=10):
    result = arg_1 + arg_2 * arg_3
    print(result)

# func_4(100, 20, 5)


# 2.2 Вариант. Функция, принимающая данные, но ничего не возвращает
# позиционные параметры 

def func_5(arg_1, arg_2, arg_3):
    result = arg_1 + arg_2 * arg_3
    print(result)

# func_5(2,3,4)
# func_5(100,20)

# 2.3 Вариант. Функция, принимающая данные, но ничего не возвращает
# именованные параметры 

def func_6(arg_1=10, arg_2=20, arg_3=30):
    result = arg_1 + arg_2 * arg_3
    print(result)

# func_6(arg_3=100, arg_1=5)

# 2.4 Вариант. Функция, принимающая данные, но ничего не возвращает
# множественные позиционные параметры

def func_7(*args):
    """
    docstring
    """
    print(args)
# можно передавать произвольное количество позиционных параметров
# они будут упакованы в виде кортежа
# func_7(10,29,30)

def func_8(*args):
    """
    функция, которая складывает произвольное количество параметров
    """
    result = 0
    for num in args:
        result += num
    print(result)

# func_8(100, 200)

# 2.4 Вариант. Функция, принимающая данные, но ничего не возвращает
# множественные именованные параметры **

def func_9(**args):
    print(args)

# можно передавать произвольное количество именованных параметров
# и они будут упакованы в виде словаря
# func_9(x=100, y=200, z=300)
import math
def distance_calculate(**args):
    """
    функция, которая вычисляет дистанцию от начала координат (0,0,0) до точки с координатами (x,y,z)
    """
    # переменная keys будет хранить список ключей аргументов из args
    keys = list(args.keys())
    
    # для вычисления дистанции применяем теорему Пифагора
    summa = 0
    # извлекаем все ключи из списка ключей аргументов из args
    for axis in keys:
        #суммирование квадратов катетов (значения координатных осей)
        summa += args[axis] ** 2
    distance = math.sqrt(summa)

    print(f"Дистанция: {distance}")

# вызов функции
distance_calculate(x=1, y=1, z=1, a=5)